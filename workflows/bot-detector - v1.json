{
  "name": "bot-detector - v1",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1904,
        -240
      ],
      "id": "578e6e0d-5a28-47ca-8da9-9fbb8c87ac64",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"botDetected\": true,\n\t\"why\": \"porque la conversación se repite vez tras vez\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1808,
        -448
      ],
      "id": "4e53dc99-7f5d-409d-8653-e22b77e405d6",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1680,
        -448
      ],
      "id": "301bc643-d9ac-4e33-9e8c-3407879e1cf1",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9a448f74-d42a-4b4e-aa41-0e90145de908",
              "leftValue": "={{ $json.output.botDetected }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2208,
        -672
      ],
      "id": "d46449fe-ae9a-465d-a25f-1ed53fd4bc42",
      "name": "If bot"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Este es el mensaje nuevo del usuario:\n{{ $('Start').first().json.user_message }}\n\n---\n\nEsta es el hitorial de interacciones:\n{{ $('Code').item.json.formattedText }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Eres un agente especializado en detectar si el usuario es un bot. Tu única tarea es analizar un historial de mensajes/interacciones entre un usuario y un bot y determinar si el usuario es también un bot o un humano.\n\nDevuelve únicamente un JSON con el campo \"botDetected\": true si el usuario se trata de un bot, o false si es un humano y el campo \"why\" con la explicación de porque determinaste si es o no un bot.\n\nÚnicos patrones que revelan que el usuario es un bot:\n\n- Repetición exacta de mensajes.\n- El usuario se presenta como un bot, asistente virtual, etc.\n\nPosibles patrones que muestran que el usuario es un humano:\n\n- Mensajes breves.\n- Errores ortográficos.\n\nDeterminar que un usuario es un bot es una acción crítica y solo debes tomarla cuando no hay duda alguna.\n\nEjemplo de salida esperada:\n`{\"botDetected\": true, \"why\": \"Porque la conversación se repite vez tras vez.\"}`\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1696,
        -672
      ],
      "id": "1d4b9dce-f9ec-43c8-b570-15545aa4fdb6",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "={{ $json.client_name }}_n8n_chat_histories",
          "mode": "name"
        },
        "limit": 10,
        "where": {
          "values": [
            {
              "column": "session_id",
              "value": "={{ $json.conversation_id.toString() }}"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "message"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1232,
        -672
      ],
      "id": "4c8df531-aeab-4f0c-82a7-341f6d43da1c",
      "name": "Select rows from a table",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "xKI0Rsj9nPwMEm0Q",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract and transform messages into a simplified array with sender and text\nconst messages = items\n  .map(item => {\n    const msg = item.json?.message;\n    if (!msg?.type || !msg?.content) return null;\n\n    const sender = msg.type === 'human' ? 'user' : 'bot';\n    let text = msg.content;\n\n    // Attempt to parse bot response if it's in JSON format\n    if (sender === 'bot') {\n      try {\n        const parsed = JSON.parse(text);\n        if (parsed.output?.text) {\n          text = parsed.output.text;\n        }\n      } catch (e) {\n        // Leave text as is if parsing fails\n      }\n    }\n\n    return { sender, text };\n  })\n  .filter(Boolean); // Remove null entries\n\n// If no valid messages, return fallback message\nif (messages.length === 0) {\n  return [\n    {\n      json: {\n        formattedText: \"No hay interacciones anteriores\"\n      }\n    }\n  ];\n}\n\n// Group user-bot message pairs into formatted text\nlet output = '';\nlet count = 1;\n\nfor (let i = 0; i < messages.length; i++) {\n  if (messages[i].sender === 'user' && messages[i + 1]?.sender === 'bot') {\n    output += `Interacción ${count}:\\nUsuario: ${messages[i].text}\\nBot: ${messages[i + 1].text}\\n\\n`;\n    count++;\n    i++; // Skip the bot message as it's already paired\n  }\n}\n\n// If no valid user-bot pairs were found\nif (output.trim() === '') {\n  return [\n    {\n      json: {\n        formattedText: \"No hay interacciones anteriores\"\n      }\n    }\n  ];\n}\n\nreturn [\n  {\n    json: {\n      formattedText: output.trim()\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1456,
        -672
      ],
      "id": "b4e1c691-4c5a-4d12-9577-15e203b66bb3",
      "name": "Code"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "client_name"
            },
            {
              "name": "user_message"
            },
            {
              "name": "conversation_id",
              "type": "number"
            }
          ]
        }
      },
      "id": "3a2dde05-6d71-4ad5-b405-4482c0bd8e93",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1008,
        -672
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "151ce943-81af-48cf-8334-6eb802590571",
              "leftValue": "={{ $json.output.botDetected }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2432,
        -768
      ],
      "id": "12fcb818-b60d-4fec-853a-82ff2f230870",
      "name": "Filter"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2432,
        -576
      ],
      "id": "1a50ddc3-c137-448e-9d4e-1362b9c8f368",
      "name": "Continue"
    }
  ],
  "connections": {
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "If bot": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Continue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "If bot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}